plugins {
    id 'idea'
    id 'java'
    id 'maven'
    id 'com.github.johnrengelman.shadow' version '2.0.1'
    id 'pl.allegro.tech.build.axion-release' version '1.8.1'
}

repositories {
    mavenLocal()
    maven { url 'http://artifactory.ops.traiana.int/artifactory/libs-release' }
    maven { url 'http://artifactory.ops.traiana.int/artifactory/libs-snapshot' }
}

scmVersion {
    useHighestVersion = true
    tag.prefix = 'release'
    tag.initialVersion = {config, position -> '1.0.0'}
    checks.snapshotDependencies = false
    checks.aheadOfRemote = false
    versionCreator 'versionWithBranch'
    hooks {
        pre {context -> if(!"master".equalsIgnoreCase(context.position.branch)){
            throw new Exception("Refuse to release on '"+context.position.branch+"' branch, 'release' task is only allowed on 'master' branch")
        }}
    }
}
group = 'com.traiana.transformer'
version = scmVersion.version.replaceAll("-develop","-SNAPSHOT").replaceAll("-SNAPSHOT-SNAPSHOT","-SNAPSHOT")
println "branch: '"+scmVersion.getScmPosition().branch+"', version: '"+version+"'"

dependencies {
    // compileOnly - will NOT be included in uber jar
    //compileOnly 'org.slf4j:slf4j-api:1.7.25'

    // compile - will be included in uber jar
    compile 'ch.qos.logback:logback-classic:1.2.1'
    compile 'org.quickfixj:quickfixj-core:1.6.3'
    compile 'io.dropwizard.metrics:metrics-core:3.2.2'
    compile 'com.datastax.cassandra:cassandra-driver-core:3.3.0'

    // test
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
}

defaultTasks 'clean', 'build'

jar {
    archiveName = project.name + '.jar'
    manifest {
        attributes 'Main-Class': 'com.traiana.fix.Main'
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-Version': version
        attributes 'Build-Time': new Date()
        attributes 'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
    }
}

task binTar(type: Tar, dependsOn: [jar] ) {
    version = ""
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    into ('lib') { from jar from configurations.compile }
    into ('') { from "src/main/scripts" }
    into ('config') { from "config" }
}

artifacts {
    archives binTar
}

task copyMainResourcesToTest(type: Copy) {
    from sourceSets.main.output.resourcesDir into sourceSets.test.output.classesDir
}

test {
    dependsOn 'copyMainResourcesToTest'
    exclude 'test/perf/**'
}

idea.module {
    inheritOutputDirs = false
    outputDir = sourceSets.main.output.classesDir
    testOutputDir = sourceSets.test.output.classesDir
}
